{"version":3,"sources":["components/ButtonTray/styles.tsx","components/ButtonTray/buttonDefinitions.ts","components/button/styles.tsx","components/button/button.tsx","components/ButtonTray/buttonTray.tsx","components/displayScreen/styles.tsx","components/displayScreen/displayScreen.tsx","components/calculator/styles.tsx","components/calculator/calculator.tsx","App.tsx","index.tsx"],"names":["ButtonTrayWrapper","styled","div","buttons","color","values","value","gridArea","type","flatMap","map","colorMap","lightGray","notPressed","pressed","darkGray","orange","StyledButton","button","Button","props","useState","setPressed","className","onMouseUp","onMouseDown","onClick","ButtonTray","style","height","DisplayScreenWrapper","DisplayScreen","CalculatorWrapper","currentValueToNumber","currentValue","Number","positive","integerValue","decimalValue","numberToCurrentValue","number","string","toString","initialCurrentValue","slice","split","integer","decimal","hasDecimal","handleAddSubtractMultiplyDivide","operator","lastValue","value1","value2","subtractValues","divideValues","multiplyValues","Calculator","setCurrentValue","displayScreenValue","setDisplayScreenValue","setLastValue","useEffect","handleOperation","newIntegerValue","length","newDecimalValue","padStart","toPercent","Error","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1915fd07.chunk.js","sourcesContent":["import styled from \"styled-components\"\n\nexport const ButtonTrayWrapper = styled.div`\n  display: grid;\n  grid-template-rows: repeat(5, 1fr);\n  grid-template-columns: repeat(4, 1fr);\n  grid-gap: 2px;\n  width: 400px;\n  height: 520px;\n  grid-template-areas:\n    \"AC plusMinus percent divide\"\n    \"seven eight nine multiply\"\n    \"four five six subtract\"\n    \"one two three add\"\n    \"zero zero period equal\";\n`\n","import { StyledButtonProps } from \"../button/styles\"\nexport type ButtonDefinition = {\n  value: string\n  gridArea: string\n  type: ButtonType\n}\nexport type ButtonType =\n  | \"modifier\"\n  | \"clear\"\n  | \"decimal\"\n  | \"number\"\n  | \"operation\"\nexport type ModifierValue = \"+/-\" | \"%\"\nexport type ClearValue = \"AC\"\nexport type DecimalValue = \".\"\nexport type NumberValue =\n  | \"0\"\n  | \"1\"\n  | \"2\"\n  | \"3\"\n  | \"4\"\n  | \"5\"\n  | \"6\"\n  | \"7\"\n  | \"8\"\n  | \"9\"\nexport type OperationValue = \"+\" | \"-\" | \"=\" | \"×\" | \"÷\"\nexport type ButtonValue =\n  | NumberValue\n  | DecimalValue\n  | ClearValue\n  | ModifierValue\n  | OperationValue\nconst darkGrayButtons: ButtonDefinition[] = [\n  { value: \"AC\", gridArea: \"AC\", type: \"clear\" },\n  { value: \"+/-\", gridArea: \"plusMinus\", type: \"modifier\" },\n  { value: \"%\", gridArea: \"percent\", type: \"modifier\" },\n]\nconst lightGrayButtons: ButtonDefinition[] = [\n  { value: \".\", gridArea: \"period\", type: \"decimal\" },\n  { value: \"0\", gridArea: \"zero\", type: \"number\" },\n  { value: \"1\", gridArea: \"one\", type: \"number\" },\n  { value: \"2\", gridArea: \"two\", type: \"number\" },\n  { value: \"3\", gridArea: \"three\", type: \"number\" },\n  { value: \"4\", gridArea: \"four\", type: \"number\" },\n  { value: \"5\", gridArea: \"five\", type: \"number\" },\n  { value: \"6\", gridArea: \"six\", type: \"number\" },\n  { value: \"7\", gridArea: \"seven\", type: \"number\" },\n  { value: \"8\", gridArea: \"eight\", type: \"number\" },\n  { value: \"9\", gridArea: \"nine\", type: \"number\" },\n]\nconst orangeButtons: ButtonDefinition[] = [\n  { value: \"+\", gridArea: \"add\", type: \"operation\" },\n  { value: \"-\", gridArea: \"subtract\", type: \"operation\" },\n  { value: \"=\", gridArea: \"equal\", type: \"operation\" },\n  { value: \"÷\", gridArea: \"divide\", type: \"operation\" },\n  { value: \"×\", gridArea: \"multiply\", type: \"operation\" },\n]\n\nconst buttonsGroupedByColor = [\n  { color: \"orange\", values: orangeButtons },\n  { color: \"lightGray\", values: lightGrayButtons },\n  { color: \"darkGray\", values: darkGrayButtons },\n]\nconst buttons = buttonsGroupedByColor.flatMap(({ color, values }) => [\n  ...values.map(({ value, gridArea, type }) => ({\n    value,\n    color,\n    gridArea,\n    type,\n  })),\n])\nexport default buttons as ({\n  color: StyledButtonProps[\"color\"]\n  value: ButtonValue\n  gridArea: string\n} & ButtonDefinition)[]\n","import styled from \"styled-components\"\n\nexport type StyledButtonProps = {\n  /**\n   * the color of the button. defaults to lightGray\n   */\n  color?: keyof typeof colorMap\n}\n/** the color options for the button */\nconst colorMap = {\n  lightGray: { notPressed: \"#7D7A80\", pressed: \"#9D9D9E\" },\n  darkGray: { notPressed: \"#383B40\", pressed: \"#5B5A5E\" },\n  orange: { notPressed: \"#FFA00A\", pressed: \"#C97C00\" },\n}\n\nexport const StyledButton = styled.button<StyledButtonProps>`\n  width: 100%;\n  height: 100%;\n  color: white;\n  font-size: 2.5rem;\n  background-color: ${({ color }) => colorMap[color || \"lightGray\"].notPressed};\n  border: none;\n  &.pressed {\n    background-color: ${({ color }) => colorMap[color || \"lightGray\"].pressed};\n  }\n`\n\nexport default StyledButton\n","import { useState } from \"react\"\nimport StyledButton, { StyledButtonProps } from \"./styles\"\nexport type ButtonProps = {\n  value: string\n  onClick: () => void\n} & StyledButtonProps\nexport const Button: React.FC<ButtonProps> = (props) => {\n  const [pressed, setPressed] = useState(false)\n  return (\n    <StyledButton\n      {...props}\n      className={pressed ? \"pressed\" : \"\"}\n      onMouseUp={() => setPressed(false)}\n      onMouseDown={() => setPressed(true)}\n      onClick={props.onClick}\n    ></StyledButton>\n  )\n}\n\nexport default Button\n","import React from \"react\"\nimport { ButtonTrayWrapper } from \"./styles\"\nimport buttons, { ButtonValue } from \"./buttonDefinitions\"\nimport { Button } from \"../button\"\nimport { ButtonTrayOnClickFunction } from \"../calculator\"\n\nexport type ButtonTrayProps = {\n  onClick: (onClickProps: ButtonTrayOnClickFunction) => void\n}\nexport const ButtonTray: React.FC<ButtonTrayProps> = (props) => {\n  return (\n    <ButtonTrayWrapper>\n      {buttons.map(({ color, value, gridArea, type }) => (\n        <div key={value} style={{ gridArea, height: \"100%\" }}>\n          <Button\n            value={value}\n            color={color}\n            onClick={() => props.onClick({ type, value: value as ButtonValue })}\n          >\n            {value}\n          </Button>\n        </div>\n      ))}\n    </ButtonTrayWrapper>\n  )\n}\n","import styled from \"styled-components\"\n\nexport const DisplayScreenWrapper = styled.div`\n  width: 400px;\n  height: 120px;\n  background-color: #545057;\n  align-items: right;\n\n  p {\n    font-weight: 200;\n    color: white;\n    padding-top: 20px;\n    line-height: 100px;\n    width: fit-content;\n    margin-right: 10px;\n    margin-left: auto;\n    font-size: 4rem;\n  }\n`\n\nexport default DisplayScreenWrapper\n","import DisplayScreenWrapper from \"./styles\"\nexport type DisplayScreenProps = { value?: string }\nexport const DisplayScreen: React.FC<DisplayScreenProps> = (props) => {\n  return (\n    <DisplayScreenWrapper>\n      <p>{props.value || \"0\"}</p>\n    </DisplayScreenWrapper>\n  )\n}\n\nexport default DisplayScreen\n","import styled from \"styled-components\"\nexport const CalculatorWrapper = styled.div`\n  height: 640px;\n  width: 400px;\n  background-color: #514e54;\n  margin-left: auto;\n  margin-right: auto;\n`\n\nexport default CalculatorWrapper\n","import { useEffect, useState } from \"react\"\nimport { ButtonTray } from \"../ButtonTray\"\nimport {\n  ButtonType,\n  ButtonValue,\n  OperationValue,\n} from \"../ButtonTray/buttonDefinitions\"\nimport { DisplayScreen } from \"../displayScreen\"\nimport CalculatorWrapper from \"./styles\"\nexport type ButtonTrayOnClickFunction = {\n  type: ButtonType\n  value: ButtonValue\n}\nexport type CalculatorProps = {}\nexport type CurrentValue = {\n  positive: boolean\n  integerValue: string\n  hasDecimal: boolean\n  decimalValue: string\n}\nconst addValues = (value1: CurrentValue, value2: CurrentValue): Number => {\n  //@ts-ignore\n  return currentValueToNumber(value1) + currentValueToNumber(value2)\n}\nconst subtractValues = (value1: CurrentValue, value2: CurrentValue): Number => {\n  //@ts-ignore\n  return currentValueToNumber(value1) - currentValueToNumber(value2)\n}\nconst multiplyValues = (value1: CurrentValue, value2: CurrentValue): Number => {\n  //@ts-ignore\n  return currentValueToNumber(value1) * currentValueToNumber(value2)\n}\nconst divideValues = (value1: CurrentValue, value2: CurrentValue): Number => {\n  //@ts-ignore\n  return currentValueToNumber(value1) / currentValueToNumber(value2)\n}\nconst currentValueToNumber = (currentValue: CurrentValue): Number => {\n  return Number(\n    (currentValue.positive ? \"+0\" : \"-0\") +\n      currentValue.integerValue +\n      \".\" +\n      currentValue.decimalValue +\n      \"0\"\n  )\n}\nconst numberToCurrentValue = (number: number): CurrentValue => {\n  const string = Number(number).toString()\n  const value: CurrentValue = initialCurrentValue()\n  if (string[0] === \"-\") {\n    value.positive = false\n  }\n  let withoutSign =\n    string[0] === \"-\" || string[0] === \"+\" ? string.slice(1) : string\n  const [integer, decimal] = withoutSign.split(\".\")\n  value.hasDecimal = !!decimal\n  value.decimalValue = decimal ? decimal : value.decimalValue\n  value.integerValue = integer\n  return value\n}\nconst toPercent = (currentValue: CurrentValue): CurrentValue => {\n  const newIntegerValue =\n    currentValue.integerValue.length > 2\n      ? currentValue.integerValue.slice(0, -2)\n      : \"0\"\n  const newDecimalValue =\n    (currentValue.integerValue.length > 2\n      ? currentValue.integerValue.slice(-2)\n      : currentValue.integerValue.padStart(2, \"0\")) + currentValue.decimalValue\n  return {\n    ...currentValue,\n    hasDecimal: true,\n    integerValue: newIntegerValue,\n    decimalValue: newDecimalValue,\n  }\n}\nconst initialCurrentValue: () => CurrentValue = () => ({\n  positive: true,\n  integerValue: \"\",\n  hasDecimal: false,\n  decimalValue: \"\",\n})\n\nconst handleAddSubtractMultiplyDivide = (\n  operator: Omit<OperationValue, \"=\">,\n  currentValue: CurrentValue,\n  lastValue: CurrentValue | null\n): CurrentValue => {\n  switch (operator) {\n    case \"+\":\n      return numberToCurrentValue(\n        addValues(lastValue || initialCurrentValue(), currentValue) as number\n      )\n    case \"-\":\n      return numberToCurrentValue(\n        subtractValues(\n          lastValue || initialCurrentValue(),\n          currentValue\n        ) as number\n      )\n    case \"÷\":\n      return numberToCurrentValue(\n        divideValues(lastValue || initialCurrentValue(), currentValue) as number\n      )\n    default:\n      return numberToCurrentValue(\n        multiplyValues(\n          lastValue || initialCurrentValue(),\n          currentValue\n        ) as number\n      )\n  }\n}\nconst handleOperation = (\n  props: ButtonTrayOnClickFunction,\n  setCurrentValue: (val: CurrentValue) => void,\n  currentValue: CurrentValue,\n  lastValue: null | (CurrentValue & { operator: string }),\n  setLastValue: (val: null | (CurrentValue & { operator: string })) => void\n) => {\n  switch (props.value) {\n    case \"=\":\n      if (lastValue?.operator) {\n        setCurrentValue(\n          handleAddSubtractMultiplyDivide(\n            lastValue?.operator,\n            currentValue,\n            lastValue\n          )\n        )\n      }\n\n      setLastValue(null)\n      break\n    default:\n      if (lastValue?.operator) {\n        setLastValue({\n          ...handleAddSubtractMultiplyDivide(\n            lastValue.operator,\n            currentValue,\n            lastValue\n          ),\n          operator: props.value as string,\n        })\n      } else {\n        setLastValue({\n          ...currentValue,\n          operator: props.value as string,\n        })\n      }\n      setCurrentValue(initialCurrentValue())\n      break\n  }\n}\nexport const Calculator: React.FC<CalculatorProps> = () => {\n  const [currentValue, setCurrentValue] =\n    useState<CurrentValue>(initialCurrentValue)\n  const [displayScreenValue, setDisplayScreenValue] = useState<string | null>(\n    null\n  )\n  const [lastValue, setLastValue] = useState<\n    null | (CurrentValue & { operator: string })\n  >(null)\n  useEffect(() => {\n    setDisplayScreenValue(currentValueToNumber(currentValue).toString())\n  }, [currentValue])\n\n  const buttonTrayClickHandler = (props: ButtonTrayOnClickFunction) => {\n    switch (props.type) {\n      case \"number\":\n        setCurrentValue({\n          ...currentValue,\n          integerValue: currentValue.integerValue + props.value,\n        })\n        break\n      case \"clear\":\n        setCurrentValue(initialCurrentValue)\n        break\n      case \"operation\":\n        handleOperation(\n          props,\n          setCurrentValue,\n          currentValue,\n          lastValue,\n          setLastValue\n        )\n        break\n      case \"modifier\":\n        switch (props.value) {\n          case \"+/-\":\n            setCurrentValue({\n              ...currentValue,\n              positive: !currentValue.positive,\n            })\n            break\n          case \"%\":\n            setCurrentValue(toPercent(currentValue))\n            break\n          default:\n            throw new Error(\"invalid modifier type\")\n        }\n        break\n      case \"decimal\":\n        break\n      default:\n        throw new Error(\"invalid button type\")\n    }\n  }\n  return (\n    <CalculatorWrapper>\n      <DisplayScreen value={displayScreenValue || \"0\"} />\n      <ButtonTray onClick={buttonTrayClickHandler}></ButtonTray>\n    </CalculatorWrapper>\n  )\n}\nexport default Calculator\n","import \"./App.css\"\nimport Calculator from \"./components/calculator\"\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Calculator />\n    </div>\n  )\n}\n\nexport default App\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\n// import reportWebVitals from \"./reportWebVitals\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals(console.info)\n"],"sourceRoot":""}